pipeline {
    agent any
    parameters {
        booleanParam(name: 'DELETE_INSTANCES', defaultValue: false, description: 'Eliminar instancias EC2 existentes con el nombre JMeterLG-Jenkins sin crear nuevas')
    }
    stages {
        stage('Setup AWS') {
            steps {
                withAWS(credentials: 'aws-jenkins-credentials', region: 'us-east-1') {
                    sh 'aws sts get-caller-identity' // Verify credentials
                }
            }
        }

        stage('Delete Existing EC2 Instances') {
            when {
                expression { params.DELETE_INSTANCES }
            }
            steps {
                withAWS(credentials: 'aws-jenkins-credentials', region: 'us-east-1') {
                    script {
                        def existingInstanceIds = sh(script: """
                            aws ec2 describe-instances \
                                --filters "Name=tag:Name,Values=GrafanaInflux" "Name=instance-state-name,Values=running" \
                                --query 'Reservations[].Instances[].InstanceId' \
                                --output text
                        """, returnStdout: true).trim()

                        if (existingInstanceIds) {
                            echo "Eliminando instancias existentes: ${existingInstanceIds}"
                            sh "aws ec2 terminate-instances --instance-ids ${existingInstanceIds}"
                            echo "Instancias eliminadas: ${existingInstanceIds}"
                        } else {
                            echo "No se encontraron instancias existentes con el nombre GrafanaInflux."
                        }
                    }
                }
            }
        }

        stage('Create EC2 Instances') {
            when {
                expression { !params.DELETE_INSTANCES }
            }
            steps {
                withAWS(credentials: 'aws-jenkins-credentials', region: 'us-east-1') {
                    script {
                        def subnetId = sh(script: """
                            aws ec2 run-instances \
                                --image-id ami-01816d07b1128cd2d \
                                --count 1 \
                                --instance-type t2.medium \
                                --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=GrafanaInflux}]' \
                                --user-data file://${env.WORKSPACE}/user_data_GrafanaInflux.sh \
                                --query 'Instances[0].SubnetId' \
                                --output text
                        """, returnStdout: true).trim()

                        def instanceIds = sh(script: """
                            aws ec2 describe-instances \
                                --filters "Name=subnet-id,Values=${subnetId}" "Name=tag:Name,Values=GrafanaInflux" \
                                --query 'Reservations[].Instances[].InstanceId' \
                                --output text
                        """, returnStdout: true).trim()

                        echo "Instancias creadas: ${instanceIds}"
                        echo "Subnet utilizada: ${subnetId}"
                    }
                }
            }
        }

        stage('Get EC2 Instances Info') {
            when {
                expression { !params.DELETE_INSTANCES }
            }
            steps {
                withAWS(credentials: 'aws-jenkins-credentials', region: 'us-east-1') {
                    sh """
                    aws ec2 describe-instances \
                        --filters "Name=tag:Name,Values=GrafanaInflux" "Name=instance-state-name,Values=pending,running" \
                        --query 'Reservations[].Instances[].PublicIpAddress'
                    """
                }
            }
        }
    }

    post {
        failure {
            script {
                withAWS(credentials: 'aws-jenkins-credentials', region: 'us-east-1') {
                    sh "aws ec2 terminate-instances --instance-ids ${env.INSTANCE_IDS}"
                    echo "Instancias terminadas: ${env.INSTANCE_IDS}"
                }
            }
        }
    }
}
